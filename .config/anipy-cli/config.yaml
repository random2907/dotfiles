# Path to user files, this includes history, seasonals files and more.
# 
# You may use `~` or environment vars in your path.
user_files_path: /home/ranjeet/.local/share/anipy-cli

# Path to your download folder/directory.
# 
# You may use `~` or environment vars in your path.
download_folder_path: /home/ranjeet/.local/share/anipy-cli/download

# Path to your seasonal downloads directory.
# 
# You may use `~` or environment vars in your path.
seasonals_dl_path: /home/ranjeet/.local/share/anipy-cli/download/seasonals

# A list of pairs defining which providers will search for anime
# in different parts of the program. Configurable areas are as follows:
# default (and history), download (-D), seasonal (-S), binge (-B) and mal
# (-M) The example will show you how it is done! Please note that for seasonal
# search always the first provider that supports it is used.
# 
# For an updated list of providers look here: https://sdaqo.github.io/anipy-cli/availabilty
# 
# Supported providers (as of 3.1.11): gogoanime, yugenanime
# 
# Examples:
#     providers:
#         default: ["provider1"] # used in default mode and for the history
#         download: ["provider2"]
#         seasonal: ["provider3"]
#         binge: ["provider4"]
#         mal: ["provider2", "provider3"]
providers:
    binge:
    - gogoanime
    default:
    - gogoanime
    download:
    - gogoanime
    history:
    - gogoanime
    mal:
    - gogoanime
    seasonal:
    - gogoanime

# A list of pairs to override the default urls that providers use.
# 
# Examples:
#     provider_urls:
#       gogoanime: "https://gogoanime3.co"
#     provider_urls: {} # do not override any urls
provider_urls: {}

# Path to your video player.
# For a list of supported players look here: https://sdaqo.github.io/anipy-cli/availabilty
# 
# Supported players (as of 3.1.11): mpv, vlc, syncplay, mpvnet, mpv-controlled
# 
# Info for mpv-controlled:
# Reuse the mpv window instead of closing and reopening.
# This uses python-mpv, which uses libmpv, on linux this is (normally) preinstalled
# with mpv, on windows you have to get the mpv-2.dll file from here:
# https://sourceforge.net/projects/mpv-player-windows/files/libmpv/
# 
# Examples:
#     player_path: /usr/bin/syncplay # full path
#     player_path: syncplay # if in PATH this also works
#     player_path: C:\\Programms\mpv\mpv.exe # on windows path with .exe
#     player_path: mpv-controlled # recycle your mpv windows!
player_path: mpv

# Extra commandline arguments for mpv and derivative.
# 
# Examples:
#     mpv_commandline_options: ["--keep-open=no", "--fs=yes"]
mpv_commandline_options:
- --keep-open=no

# Extra commandline arguments for vlc.
# 
# Examples:
#     vlc_commandline_options: ["--fullscreen"]
vlc_commandline_options: []

# Extra commandline arguments for iina.
# 
# Examples:
#     iina_commandline_options: ["--mpv-fullscreen"]
iina_commandline_options: []

# DEPRECATED This option was deprecated in 3.0.0, please use `mpv-
# controlled` in the `player_path` instead!
# 
# Reuse the mpv window instead of closing and reopening. This uses
# python-mpv, which uses libmpv, on linux this is (normally)
# preinstalled with mpv, on windows you have to get the mpv-2.dll
# file from here:
# https://sourceforge.net/projects/mpv-player-windows/files/libmpv/
reuse_mpv_window: false

# Always use ffmpeg to download m3u8 playlists instead of the internal
# downloader.
# 
# To temporarily enable this use the `--ffmpeg` command line flag.
ffmpeg_hls: false

# Remux resulting download to a specific container using ffmpeg.
# You can use about any conatainer supported by ffmpeg: `.your-container`.
# 
# Examples:
#     remux_to: .mkv # remux all downloads to .mkv container
#     remux_to .mp4 # downloads with ffmpeg default to a .mp4 container,
#     with this option the internal downloader's downloads also get remuxed
#     remux_to: null or remux_to: "" # do not remux
remux_to: null

# Specify the name format of a download, available fields are:
#     show_name: name of the show/anime
#     episode_number: number of the episode
#     quality: quality/resolution of the video
#     provider: provider used to download
#     type: this field is populated with `dub` if the episode is in dub format or `sub` otherwise
# 
# The fields should be set in curly braces i.e. `{field_name}`.
# Do not add a suffix (e.g. '.mp4') here, if you want to change this
# look at the `remux_to` config option.
# 
# You have to at least use episode_number in the format or else, while downloading,
# perceding episodes of the same series will be skipped because the file name will be the same.
# 
# Examples:
#     download_name_format: "[{provider}] {show_name} E{episode_number} [{type}][{quality}p]"
#     download_name_format: "{show_name}_{episode_number}"
download_name_format: '{show_name}_{episode_number}'

# Activate discord presence, only works with discord open.
dc_presence: false

# This automatically opens the downloaded file if downloaded through
# the `d` option in the default cli.
auto_open_dl_defaultcli: true

# Your MyAnimeList username for MAL mode.
mal_user: ''

# Your MyAnimeList password for MAL mode.
# 
# The password may also be passed via the `--mal-password <pwd>`
# commandline option.
mal_password: ''

# All anime in your MyAnimeList with this tag will be ignored by
# anipy-cli.
# 
# Examples:
#     mal_ignore_tag: ignore # all anime with ignore tag will be ignored
#     mal_ignore_tag: "" # no anime will be ignored
mal_ignore_tag: ignore

# All anime in your MyAnimeList with this tag will be switched over to
# dub in MAL mode, if the dub is available. If you do not specify a tag,
# anipy-cli will use `preferred_type` to choose dub or sub in MAL mode.
# 
# Examples:
#     mal_dub_tag: dub # all anime with this tag will be switched to dub
#     mal_dub_tag: "" # no anime will be switched to dub, except you have preferred_type on dub
mal_dub_tag: dub

# Custom tags to tag all anime in your MyAnimeList that are
# altered/added by anipy-cli.
# 
# Examples:
#     mal_tags: ["anipy-cli"] # tag all anime with anipy-cli
#     mal_tags: ["anipy-cli", "important"] # tag all anime with anipy-cli and important
#     mal_tags: null or mal_tags: [] # Do not tag the anime
mal_tags: []

# Status categories of your MyAnimeList that anipy-cli uses for
# downloading/watching new episodes listing anime in your list and stuff
# like that. Normally the watching catagory should be enough as you would
# normally put anime you currently watch in the watching catagory.
# 
# Valid values are: watching, completed, on_hold, dropped, plan_to_watch
mal_status_categories:
- watching

# The minumum similarity between titles when mapping anime in MAL mode.
# This is a decimal number from 0 - 1, 1 meaning 100% match and 0 meaning all characters are different.
# If the similarity of a map is below the threshold you will be prompted for a manual map.
# 
# So in summary:
#     higher number: more exact matching, but more manual mapping
#     lower number: less exact matching, but less manual mapping
# 
# If you are interested, the algorithm being used here is this: https://en.wikipedia.org/wiki/Levenshtein_distance
mal_mapping_min_similarity: 0.8

# Check alternative names when mapping anime.
# 
# If turned on this will slow down mapping but provide better
# chances of finding a match.
mal_mapping_use_alternatives: true

# Use filters (e.g. year, season etc.) of providers to narrow down the
# results, this will lead to more accurate mapping, but provide wrong
# results if the filters of the provider do not work properly or if anime
# are not correctly marked with the correct data.
mal_mapping_use_filters: true

# DEPRECATED This option was deprecated in 3.0.0, please consider
# using the `--mal-sync-seasonals` cli option in compination with `-M`
# instead.
# 
# Automatically sync MyAnimeList to Seasonals list.
auto_sync_mal_to_seasonals: false

auto_map_mal_to_gogo: false

# Specify which anime types (dub or sub) you prefer. If this is
# specified, you will not be asked to switch to dub anymore. You can
# however always switch to either in the menu.
# 
# Examples:
#     preferred_type: sub
#     preferred_type: dub
#     preferred_type: null or preferred_type: "" # always ask
preferred_type: null

# If this is set to true you will not be prompted to search in season.
skip_season_search: false

# If this is set to true, the system will assume you want to search in season.
# If skip_season_search is true, this will be ignored)
assume_season_search: false

